$date
	Wed Aug 13 11:11:19 2025
$end
$version
	QuestaSim Version 10.6c
$end
$timescale
	1ns
$end

$scope module uvm_root $end
$upscope $end

$scope module top $end
$upscope $end

$scope begin uvm_pkg $end
$var parameter 32 ! UVM_HDL_MAX_WIDTH $end
$var parameter 32 " UVM_STREAMBITS $end
$var parameter 32 # UVM_RADIX $end
$var parameter 32 $ UVM_MACRO_NUMFLAGS $end
$var parameter 32 % UVM_DEFAULT $end
$var parameter 32 & UVM_ALL_ON $end
$var parameter 32 ' UVM_FLAGS_ON $end
$var parameter 32 ( UVM_FLAGS_OFF $end
$var parameter 32 ) UVM_COPY $end
$var parameter 32 * UVM_NOCOPY $end
$var parameter 32 + UVM_COMPARE $end
$var parameter 32 , UVM_NOCOMPARE $end
$var parameter 32 - UVM_PRINT $end
$var parameter 32 . UVM_NOPRINT $end
$var parameter 32 / UVM_RECORD $end
$var parameter 32 0 UVM_NORECORD $end
$var parameter 32 1 UVM_PACK $end
$var parameter 32 2 UVM_NOPACK $end
$var parameter 32 3 UVM_PHYSICAL $end
$var parameter 32 4 UVM_ABSTRACT $end
$var parameter 32 5 UVM_READONLY $end
$var parameter 32 6 UVM_NODEFPRINT $end
$var parameter 32 7 UVM_MACRO_EXTRAS $end
$var parameter 32 8 UVM_FLAGS $end
$var parameter 32 9 UVM_UNPACK $end
$var parameter 32 : UVM_CHECK_FIELDS $end
$var parameter 32 ; UVM_END_DATA_EXTRA $end
$var parameter 32 < UVM_START_FUNCS $end
$var parameter 32 = UVM_SET $end
$var parameter 32 > UVM_SETINT $end
$var parameter 32 ? UVM_SETOBJ $end
$var parameter 32 @ UVM_SETSTR $end
$var parameter 32 A UVM_END_FUNCS $end
$var parameter 32 B UVM_STR_CRC_POLYNOMIAL $end
$var parameter 32 C UVM_STDOUT $end
$var parameter 32 D UVM_LINE_WIDTH $end
$var parameter 32 E UVM_NUM_LINES $end
$var parameter 32 F UVM_SMALL_STRING $end
$var parameter 32 G UVM_LARGE_STRING $end
$var reg 1 H uvm_start_uvm_declarations $end
$var integer 32 I uvm_global_random_seed $end
$var integer 32 J UVM_UNBOUNDED_CONNECTIONS $end

$scope function uvm_hdl_check_path $end
$var integer 32 K uvm_hdl_check_path $end
$upscope $end

$scope function uvm_hdl_deposit $end
$var integer 32 L uvm_hdl_deposit $end
$var reg 1024 M value [1023:0] $end
$upscope $end

$scope function uvm_hdl_force $end
$var integer 32 N uvm_hdl_force $end
$var reg 1024 O value [1023:0] $end
$upscope $end

$scope task uvm_hdl_force_time $end
$var reg 1024 P value [1023:0] $end
$var time 64 Q force_time $end
$upscope $end

$scope function uvm_hdl_release_and_read $end
$var integer 32 R uvm_hdl_release_and_read $end
$var reg 1024 S value [1023:0] $end
$upscope $end

$scope function uvm_hdl_release $end
$var integer 32 T uvm_hdl_release $end
$upscope $end

$scope function uvm_hdl_read $end
$var integer 32 U uvm_hdl_read $end
$var reg 1024 V value [1023:0] $end
$upscope $end

$scope function uvm_dpi_get_next_arg_c $end
$upscope $end

$scope function uvm_dpi_get_tool_name_c $end
$upscope $end

$scope function uvm_dpi_get_tool_version_c $end
$upscope $end

$scope function uvm_dpi_get_next_arg $end
$upscope $end

$scope function uvm_dpi_get_tool_name $end
$upscope $end

$scope function uvm_dpi_get_tool_version $end
$upscope $end

$scope function uvm_dpi_regcomp $end
$upscope $end

$scope function uvm_dpi_regexec $end
$var integer 32 W uvm_dpi_regexec $end
$upscope $end

$scope function uvm_dpi_regfree $end
$upscope $end

$scope function uvm_re_match $end
$var integer 32 X uvm_re_match $end
$upscope $end

$scope function uvm_dump_re_cache $end
$upscope $end

$scope function uvm_glob_to_re $end
$upscope $end

$scope function uvm_revision_string $end
$upscope $end

$scope function uvm_radix_to_string $end
$var integer 32 Y radix $end
$upscope $end

$scope function uvm_instance_scope $end
$var reg 8 Z c [7:0] $end
$var integer 32 [ pos $end
$upscope $end

$scope function uvm_oneway_hash $end
$var integer 32 \ uvm_oneway_hash $end
$var integer 32 ] seed $end
$var reg 1 ^ msb $end
$var reg 8 _ current_byte [7:0] $end
$var reg 32 ` crc1 [31:0] $end
$upscope $end

$scope function uvm_create_random_seed $end
$var integer 32 a uvm_create_random_seed $end
$upscope $end

$scope function uvm_object_value_str $end
$upscope $end

$scope function uvm_leaf_scope $end
$var reg 8 b scope_separator [7:0] $end
$var reg 8 c bracket_match [7:0] $end
$var integer 32 d pos $end
$var integer 32 e bmatches $end
$upscope $end

$scope function uvm_vector_to_string $end
$var reg 4096 f value [4095:0] $end
$var integer 32 g size $end
$var integer 32 h radix $end
$upscope $end

$scope function uvm_get_array_index_int $end
$var integer 32 i uvm_get_array_index_int $end
$var reg 1 j is_wildcard $end
$var integer 32 k i $end
$upscope $end

$scope function uvm_get_array_index_string $end
$var reg 1 l is_wildcard $end
$var integer 32 m i $end
$upscope $end

$scope function uvm_is_array $end
$var reg 1 n uvm_is_array $end
$upscope $end

$scope function uvm_has_wildcard $end
$upscope $end

$scope task run_test $end
$upscope $end

$scope function global_stop_request $end
$upscope $end

$scope function set_global_timeout $end
$var time 64 o timeout $end
$var reg 1 p overridable $end
$upscope $end

$scope function set_global_stop_timeout $end
$var time 64 q timeout $end
$upscope $end

$scope function uvm_report_enabled $end
$var reg 1 r uvm_report_enabled $end
$var integer 32 s verbosity $end
$var reg 2 t severity [1:0] $end
$upscope $end

$scope function uvm_report $end
$var reg 2 u severity [1:0] $end
$var integer 32 v verbosity $end
$var integer 32 w line $end
$upscope $end

$scope function uvm_report_info $end
$var integer 32 x verbosity $end
$var integer 32 y line $end
$upscope $end

$scope function uvm_report_warning $end
$var integer 32 z verbosity $end
$var integer 32 { line $end
$upscope $end

$scope function uvm_report_error $end
$var integer 32 | verbosity $end
$var integer 32 } line $end
$upscope $end

$scope function uvm_report_fatal $end
$var integer 32 ~ verbosity $end
$var integer 32 !! line $end
$upscope $end

$scope function uvm_string_to_severity $end
$var reg 1 "! uvm_string_to_severity $end
$var reg 2 #! sev [1:0] $end
$upscope $end

$scope function uvm_string_to_action $end
$upscope $end

$scope function set_config_int $end
$var reg 4096 $! value [4095:0] $end
$upscope $end

$scope function set_config_object $end
$var reg 1 %! clone $end
$upscope $end

$scope function set_config_string $end
$upscope $end

$scope function uvm_is_match $end
$var reg 1 &! uvm_is_match $end
$upscope $end

$scope function uvm_string_to_bits $end
$var reg 115200 '! uvm_string_to_bits [115199:0] $end
$upscope $end

$scope function uvm_bits_to_string $end
$var reg 115200 (! str [115199:0] $end
$upscope $end

$scope task uvm_wait_for_nba_region $end
$var integer 32 )! nba $end
$var integer 32 *! next_nba $end
$upscope $end

$scope function uvm_split_string $end
$upscope $end

$scope function uvm_hdl_concat2string $end
$upscope $end
$upscope $end

$scope begin alu_pkg $end
$upscope $end

$scope begin alu_top_sv_unit $end
$upscope $end

$scope begin std $end
$upscope $end

$scope begin questa_uvm_pkg $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0l
0n
0"!
b0 #!
bx '!
bx (!
bx M
bx O
bx P
bx S
bx V
1H
1^
b1110001 _
b11011110001000001010011110111111 `
b1 f
0j
0p
0r
b0 t
b0 u
bx $!
0%!
0&!
b10000000000 !
b1000000000000 "
b1111000000000000000000000000 #
b10001 $
b10101010101 %
b101010101 &
b101010101 '
b0 (
b1 )
b10 *
b100 +
b1000 ,
b10000 -
b100000 .
b1000000 /
b10000000 0
b100000000 1
b1000000000 2
b10000000000000 3
b100000000000000 4
b1000000000000000 5
b10000000000000000 6
b100000000000000000 7
b100000000000000001 8
b100000000000000010 9
b100000000000000011 :
b100000000000000100 ;
b100000000000000101 <
b100000000000000110 =
b100000000000000110 >
b100000000000000111 ?
b100000000000001000 @
b100000000000001000 A
b100110000010001110110110110 B
b1 C
b1111000 D
b1111000 E
b1110111111 F
b11100000111111111 G
b0 Y
b101110 b
b0 c
b101011 d
b11111111111111111111111111111111 e
b0 m
b0 K
b0 L
b0 N
b0 R
b0 T
b0 U
b1 W
b0 X
b1101001011000001111100000011110 I
b101110 Z
b111 [
b10101001101110011101011100111111 \
b1101001011000001111100000011110 ]
b100010010100011111100101110111 a
b100000 g
b10000000000000000000000000 h
b0 i
b0 k
b111110100 s
b0 v
b0 w
b11001000 x
b11011001 y
b0 z
b0 {
b0 |
b0 }
b0 ~
b0 !!
b100100 )!
b100100 *!
b11111111111111111111111111111111 J
bx Q
bx o
bx q
$end
#25
b100101 *!
b10101001101110011101011101000000 a
b100101 )!
#85
b100110 *!
b10101001101110011101011101000010 a
b100110 )!
#125
b100111 *!
b10101001101110011101011101000101 a
b100111 )!
#155
b101000 *!
b10101001101110011101011101001001 a
b101000 )!
#185
b101001 *!
b10101001101110011101011101001110 a
b101001 )!
#215
b101010 *!
b101011 *!
b101100 *!
b101010 )!
b101011 )!
b101100 )!
b101101 *!
b101110 *!
b101101 )!
b101110 )!
b100010010100011111100110001001 a
b11000110000100000000110111010111 a
b11101110011011011010100001111110 a
b10100101010011101001101111000110 a
b10000101011110000101101001110000 a
b1101010010000000011110000111011 a
b1101100011101010110011001001 a
b10010001011111111101001010110100 a
b1000100010000100000101001001110 a
b11000111110000000110000010010110 a
b10011010111111101001000111111111 a
b11011001000011001111110000110000 a
b10011001001001111011000001101101 a
b11000110010001001111100111001001 a
b101000000101110110100001011100 a
b1011000110000000101000001010 a
b101001110110111100001011011111 a
b1100111101010101010101000111 a
b110101101100000000011011111010 a
b11010110001111011101111111101 a
b10000000100000100110111000000111 a
b1011011101111101001001001000011 a
b1000100010011101010011101110001 a
b1101010111111011111100100010100 a
b11110100100000100111100010010 a
b10111010001000010111000001111110 a
b11100101011111001001011000010010 a
b1111101000101101001110110101111 a
b111000011000110011100110101111 a
b11011100000111001000010000111110 a
b100010010100011111100110011100 a
b11000110000100000000110111101010 a
b11101110011011011010100010010001 a
b10100101010011101001101111011001 a
b10000101011110000101101010000011 a
b1101010010000000011110001001110 a
b1101100011101010110011011100 a
b10010001011111111101001011000111 a
b1000100010000100000101001100001 a
b11000111110000000110000010101001 a
b10011010111111101001001000010010 a
b11011001000011001111110001000011 a
b10011001001001111011000010000000 a
b11000110010001001111100111011100 a
b101000000101110110100001101111 a
b1011000110000000101000011101 a
b101001110110111100001011110010 a
b1100111101010101010101011010 a
b110101101100000000011100001101 a
b11010110001111011110000010000 a
b10000000100000100110111000011010 a
b1011011101111101001001001010110 a
b1000100010011101010011110000100 a
b1101010111111011111100100100111 a
b11110100100000100111100100101 a
b10111010001000010111000010010001 a
b11100101011111001001011000100101 a
b1111101000101101001110111000010 a
b111000011000110011100111000010 a
b11011100000111001000010001010001 a
b100010010100011111100110110000 a
b11000110000100000000110111111110 a
b11101110011011011010100010100101 a
b10100101010011101001101111101101 a
b10000101011110000101101010010111 a
b1101010010000000011110001100010 a
b1101100011101010110011110000 a
b10010001011111111101001011011011 a
b1000100010000100000101001110101 a
b11000111110000000110000010111101 a
b10011010111111101001001000100110 a
b11011001000011001111110001010111 a
b10011001001001111011000010010100 a
b11000110010001001111100111110000 a
b101000000101110110100010000011 a
b1011000110000000101000110001 a
b101001110110111100001100000110 a
b1100111101010101010101101110 a
b110101101100000000011100100001 a
b11010110001111011110000100100 a
b10000000100000100110111000101110 a
b1011011101111101001001001101010 a
b1000100010011101010011110011000 a
b1101010111111011111100100111011 a
b11110100100000100111100111001 a
b10111010001000010111000010100101 a
b11100101011111001001011000111001 a
b1111101000101101001110111010110 a
b111000011000110011100111010110 a
b11011100000111001000010001100101 a
b11011100000111001000010001111010 a
b111000011000110011100111101011 a
b1111101000101101001110111101011 a
b10000000100000100110111001000011 a
b10100101010011101001110000000010 a
b100010010100011111100111000101 a
b11000110000100000000111000010011 a
b11101110011011011010100010111010 a
b1101010010000000011110001110111 a
b10000101011110000101101010101100 a
b11010110001111011110000111001 a
b10011010111111101001001000111011 a
b1101100011101010110100000101 a
b10010001011111111101001011110000 a
b1000100010000100000101010001010 a
b11000111110000000110000011010010 a
b11011001000011001111110001101100 a
b10011001001001111011000010101001 a
b110101101100000000011100110110 a
b11000110010001001111101000000101 a
b101000000101110110100010011000 a
b1011000110000000101001000110 a
b101001110110111100001100011011 a
b1100111101010101010110000011 a
b1101010111111011111100101010000 a
b1011011101111101001001001111111 a
b1000100010011101010011110101101 a
b11100101011111001001011001001110 a
b11110100100000100111101001110 a
b10111010001000010111000010111010 a
